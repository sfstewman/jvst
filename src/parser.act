/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = SJP_TOK_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;
	ast       :ast;
	path	  :path;

%maps%

	string -> string;
	number -> number;
	bool   -> bool;

	kw     -> kw;
	type   -> type;

        re-dialect -> re_dialect_t;
        regexp     -> ast_regexp_t;

	ast-string-set -> ast_string_set_t;

        ast-prop-schema -> ast_prop_schema_t;
        ast-schema -> ast_schema_t;

        ast-schema-list -> ast_schema_list_t;

        ast-json-value         -> ast_json_value_t;
        ast-json-property-list -> ast_json_plist_t;
        ast-json-property-pair -> ast_json_ppair_t;
        ast-json-item-list     -> ast_json_ilist_t;

	path -> path_t;

%header% @{

	#include <assert.h>
	#include <stdarg.h>
	#include <stdlib.h>
	#include <string.h>
	#include <limits.h>

        #include <uriparser/Uri.h>

	#include "sjp_lexer.h"

	#include "debug.h"
	#include "parser.h"
        #include "parserutils.h"
	#include "jdom.h"
	#include "ast.h"
	#include "kw.h"
	#include "xalloc.h"

	struct act_state {
		struct sjp_token t;
		enum SJP_TOKEN save;
	};

	typedef json_number number;
	typedef enum kw kw;
	typedef enum json_valuetype type;

	typedef enum re_dialect re_dialect_t;
	typedef struct ast_regexp ast_regexp_t;

	typedef struct path *path_t;

	struct string_set {
		struct ast_string_set *head;
		struct ast_string_set **tail;
	};
	typedef struct string_set *ast_string_set_t;

	typedef struct ast_schema *ast_schema_t;
	typedef struct ast_property_schema *ast_prop_schema_t;

	typedef struct {
		struct ast_schema_set *head;
		struct ast_schema_set **tail;
		unsigned count;
	} *ast_schema_list_t;

	typedef struct json_value ast_json_value_t;

	struct ast_json_plist {
		struct json_property *head;
		struct json_property **tail;
	};
	typedef struct ast_json_plist *ast_json_plist_t;

	typedef struct json_property *ast_json_ppair_t;

	struct ast_json_ilist {
		struct json_element *head;
		struct json_element **tail;
	};
	typedef struct ast_json_ilist  *ast_json_ilist_t;

	static void ast_json_free_value_data(struct json_value v);

	static void ast_json_free_string_data(struct json_string *str)
	{
		/* XXX - is there a better way to handle the const-ness of str->s? */
		free((void *)str->s);
		str->s = NULL;
		str->len = 0;
	}

	static void ast_json_free_elements(struct json_element *elt)
	{
		struct json_element *it, *next;
		for (it=elt; elt != NULL; elt = next) {
			next = it->next;
			ast_json_free_value_data(it->value);
			free(it);
		}
	}

	static void ast_json_free_properties(struct json_property *prop)
	{
		struct json_property *it, *next;
		for (it=prop; prop != NULL; prop = next) {
			next = it->next;
			ast_json_free_value_data(it->value);
			free(it);
		}
	}

	static void ast_json_free_value_data(struct json_value v)
	{
		switch (v.type) {
		case JSON_VALUE_OBJECT:
			ast_json_free_properties(v.u.obj);
			break;

		case JSON_VALUE_ARRAY:
			ast_json_free_elements(v.u.arr);
			break;

		case JSON_VALUE_STRING:
			ast_json_free_string_data(&v.u.str);
			break;

		case JSON_VALUE_NUMBER:
		case JSON_VALUE_INTEGER:
		case JSON_VALUE_BOOL:
		case JSON_VALUE_NULL:
			/* nothing to free */
			break;

		default:
			/* should not reach */
			fprintf(stderr, "invalid json value type 0x%x\n", v.type);
			abort();
		}
	}

	static void add_all_ids(struct ast_schema *ast, struct path *p)
        {
                path_add_all_ids(p, ast);
        }

	#define CURRENT_TERMINAL act_state->t.type
	#define ERROR_TERMINAL   SJP_TOK_NONE /* XXX: NONE is not an error */
	#define ADVANCE_LEXER    next(lex_state, &act_state->t)
	#define SAVE_LEXER(type) act_state->save = (type)
	#define RESTORE_LEXER    act_state->t.type = act_state->save

	static void
	xerr(struct sjp_lexer *lex_state, enum kw k, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		/* XXX: one token ahead */
		fprintf(stderr, "%zu: ", lex_state->line);

		if (k != 0) {
			fprintf(stderr, "\"%s\": ", kw_name(k));
		}

		va_start(ap, fmt);
		vfprintf(stderr, fmt, ap);
		va_end(ap);

		fprintf(stderr, "\n");

		exit(1);
	}

	static void
	xerr_syntax(struct sjp_lexer *lex_state, const char *name)
	{
		assert(lex_state != NULL);

		if (name == NULL) {
			xerr(lex_state, 0, "Syntax error");
		} else {
			xerr(lex_state, 0, "Syntax error: expected %s", name);
		}
	}

	static void
	next(struct sjp_lexer *lex_state, struct sjp_token *t)
	{
		int r;

		assert(lex_state != NULL);
		assert(t != NULL);

		r = sjp_lexer_token(lex_state, t);
		if (SJP_ERROR(r)) {
			xerr(lex_state, 0, "sjp error: %d, n=%zu", r, t->n);
			exit(EXIT_FAILURE);
		}

		if (debug & DEBUG_SJP) {
/* TODO: talk about r */
		}

		switch (r) {
		case SJP_OK:
			if (t->type == SJP_TOK_NONE) {
				xerr(lex_state, 0, "parsing after EOS");
				abort();
			}
			break;

		case SJP_MORE:
			assert(t->type == SJP_TOK_NONE
				|| t->type == SJP_TOK_STRING || t->type == SJP_TOK_NUMBER);

			if (t->type == SJP_TOK_NONE) {
				sjp_lexer_eos(lex_state);
				next(lex_state, t);
				return;
			}

			/*
			 * TODO: need more input; pull from sjp_lexer_more(),
			 * and get rid of readfile() in main.
			 * Tokens returned here are partial; I don't see how to sensibly avoid
			 * buffering those.
			 */

			/*
			 * Partial tokens are currently not possible in valid input
			 * due to main() buffering the entire input. So any partial token here
			 * is from an incomplete token at the end of input (presumably an
			 * unterminated string).
			 */
			/* TODO: show token name, position */
			xerr(lex_state, 0, "sjp incomplete token at end of input\n");
			exit(EXIT_FAILURE);

		case SJP_PARTIAL:
			assert(t->type != SJP_TOK_NONE);
			/* XXX: how can this happen? */
			xerr(lex_state, 0, "sjp unexpected partial token\n");
			abort();

		default:
			xerr(lex_state, 0, "sjp unrecognised error: %d", r);
			abort();
		}

		if (debug & DEBUG_LEX) {
			switch (t->type) {
			case SJP_TOK_NULL:
				fprintf(stderr, "<NULL>\n");
				break;

			case SJP_TOK_TRUE:
				fprintf(stderr, "<TRUE>\n");
				break;

			case SJP_TOK_FALSE:
				fprintf(stderr, "<FALSE>\n");
				break;

			case SJP_TOK_STRING:
				fprintf(stderr, "<STRING: \"%.*s\">\n", (int) t->n, t->value);
				break;

			case SJP_TOK_NUMBER:
				fprintf(stderr, "<NUMBER: %f>\n", t->extra.dbl);
				break;

			case SJP_TOK_EOS:
				fprintf(stderr, "<EOS>\n");
				break;

			default:
				fprintf(stderr, "<'%c'>\n", (int) t->type);
				break;
			}
		}
	}

        static void
        set_schema_list(struct ast_schema_set **varp, ast_schema_list_t list, const char *name)
        {
                assert(varp != NULL);
                assert(list->head != NULL);

		while (*varp != NULL) {
			varp = &(*varp)->next;
		}
                *varp = list->head;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<%s>:\n", name);
                        // FIXME: print out list of items
                }
        }

@}, @{

	#include <stdio.h>

	#include "sjp_lexer.h"

	typedef struct ast_schema * ast;
	typedef struct act_state * act_state;
	typedef struct sjp_lexer * lex_state;
	typedef struct path * path;
	typedef struct json_string string;

@};

%terminals%

	STRING: () -> (s :string) = @{
		assert(act_state->t.type == @$STRING);

		@s.s   = xstrndup(act_state->t.value, act_state->t.n);
		@s.len = act_state->t.n;
	@};

	NUMBER: () -> (n :number) = @{
		assert(act_state->t.type == @$NUMBER);

		@n = act_state->t.extra.dbl;
	@};

	TRUE: () -> (v :bool) = @{
		@v = true;
	@};

	FALSE: () -> (v :bool) = @{
		@v = false;
	@};

%actions%

        <path-set-baseuri>:     (s :string) -> () = @{
                path_set_baseid(&path->items[0], &path->items[0], @s);
        @};

	<path-push-empty>:	() -> () = @{
                path_push_empty(path);
        @};

	<path-push-str>: (s :string) -> () = @{
		path_push_str(path, @s);
	@};

	<path-push-num-zero> = @{
		path_push_num_zero(path);
	@};

	<path-push-num-next> = @{
		path_push_num_next(path);
	@};

	<path-pop> = @{
		path_pop(path);
	@};

	<kw-lookup>: (s :string) -> (k :kw) = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<kw-lookup>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		@k = kw_lookup(&@s);

		/* schema are allowed to have anything ... */
		/*
		if (@k == 0) {
			xerr(lex_state, 0, "Unrecognised keyword: \"%s\"", @s.s);
			@!;
		}
		*/
	@};

	<type-lookup>: (s :string) -> (t :type) = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<type-lookup>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		@t = type_lookup(&@s);
		if (@t == 0) {
			xerr(lex_state, KW_TYPE, "Unknown type name: \"%s\"", @s.s);
		}
	@};

	<kw-schema>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_SCHEMA);                @};
	<kw-ref>:                   (k :kw) -> (v :bool) = @{ @v = (@k == KW_REF);                   @};
	<kw-id>:                    (k :kw) -> (v :bool) = @{ @v = (@k == KW_ID);                    @};

	<kw-multiple-of>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_MULTIPLE_OF);           @};
	<kw-maximum>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAXIMUM);               @};
	<kw-exclusive-maximum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MAXIMUM);     @};
	<kw-minimum>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_MINIMUM);               @};
	<kw-exclusive-minimum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MINIMUM);     @};
	<kw-max-length>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_LENGTH);            @};
	<kw-min-length>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_LENGTH);            @};
	<kw-pattern>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN);               @};
	<kw-items>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_ITEMS);                 @};
	<kw-additional-items>:      (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_ITEMS);      @};
	<kw-max-items>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_ITEMS);             @};
	<kw-min-items>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_ITEMS);             @};
	<kw-unique-items>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_UNIQUE_ITEMS);          @};
	<kw-contains>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONTAINS);              @};
	<kw-max-properties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_PROPERTIES);        @};
	<kw-min-properties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_PROPERTIES);        @};
	<kw-required>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_REQUIRED);              @};
	<kw-properties>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTIES);            @};
	<kw-pattern-properties>:    (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN_PROPERTIES);    @};
	<kw-additional-properties>: (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_PROPERTIES); @};
	<kw-dependencies>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEPENDENCIES);          @};
	<kw-property-names>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTY_NAMES);        @};

	<kw-enum>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_ENUM);                  @};
	<kw-const>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONST);                 @};
	<kw-type>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_TYPE);                  @};
	<kw-all-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ALL_OF);                @};
	<kw-any-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ANY_OF);                @};
	<kw-one-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ONE_OF);                @};
	<kw-not>:                   (k :kw) -> (v :bool) = @{ @v = (@k == KW_NOT);                   @};

	<kw-title>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_TITLE);                 @};
	<kw-definitions>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFINITIONS);           @};
	<kw-description>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_DESCRIPTION);           @};
	<kw-default>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFAULT);               @};
	<kw-examples>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXAMPLES);              @};

        <re-literal>:               () -> (dialect :re-dialect) = @{ @dialect = RE_LITERAL; @};
        <re-pattern>:               () -> (dialect :re-dialect) = @{ @dialect = RE_NATIVE; @};

        <new-regexp>:               (dialect :re-dialect, pat :string) -> (re :regexp) = @{
                @re.dialect = @dialect;
                @re.str = @pat;
        @};

        <add-required-property>:    (s :string) -> () = @{
                struct ast_string_set *ss;
                ss = xmalloc(sizeof *ss);
                ss->str = @s;
                // prepend required property
                ss->next = ast->required.set;
                ast->required.set = ss;
        @};

        <new-prop-schema>:          (re :regexp,sch :ast-schema) -> (ps :ast-prop-schema) = @{
                @ps = xmalloc(sizeof *@ps);
                @ps->pattern = @re;
                @ps->schema = @sch;
                @ps->next = NULL;
        @};

        <append-list-of-props>:     (head: ast-prop-schema,entry: ast-prop-schema) -> () = @{
                struct ast_property_schema *ps, **pspp;

		if (debug & DEBUG_ACT) {
                        struct ast_property_schema *head, *entry;
			head = @head;
			entry = @entry;

                        // XXX - make this useful!
			fprintf(stderr, "<append-list-of-props>: %p %p\n", (void *)head, (void *)entry);
		}

                ps = @head;
                for (pspp = &ps; *pspp != NULL; pspp = &(*pspp)->next) {
                        continue;
                }
                *pspp = @entry;
        @};

        <parse-schema>: () -> (sch: ast-schema) = @{
                static struct ast_schema zero = { 0 };
		struct ast_schema *sch;
                sch = xmalloc(sizeof *sch);
                *sch = zero;
                p_schema(lex_state, act_state, sch, path);
                add_all_ids(sch, path);
		@sch = sch;
        @};

        <set-path>:             () -> () = @{
                add_all_ids(ast, path);
        @};

        <set-ref>:              (s :string) -> () = @{
		struct json_string s = @s;
		ast->ref = path_ref(path,s);
                ast->kws |= KWS_HAS_REF;
		if (debug & DEBUG_ACT) {
                        // XXX - make this useful!
			fprintf(stderr, "<set-ref>: %.*s\n", (int)s.len, s.s);
		}
        @};

        <set-schema-true>:          () -> () = @{
                ast->kws |= KWS_VALUE;
                ast->value.type = JSON_VALUE_BOOL;
                ast->value.u.v = true;
        @};

        <set-schema-false>:         () -> () = @{
                ast->kws |= KWS_VALUE;
                ast->value.type = JSON_VALUE_BOOL;
                ast->value.u.v = false;
        @};

        <set-properties>:           (ps :ast-prop-schema) -> () = @{
                struct ast_property_schema *ps, **pspp;

                ps = @ps;

		if (debug & DEBUG_ACT) {
                        struct ast_property_schema *itm;

                        // XXX - make this useful!
			fprintf(stderr, "<set-properties>: %p\n", (void *) ps);
                        for (itm = ps; itm != NULL; itm = itm->next) {
                                int len;

                                len = itm->pattern.str.len < INT_MAX ?  (int)itm->pattern.str.len : INT_MAX;

                                fprintf(stderr, "  --> ");
                                switch (itm->pattern.dialect) {
                                case RE_LITERAL:
                                        fprintf(stderr, "\"%.*s\"\n", len, itm->pattern.str.s);
                                        break;

                                case RE_NATIVE:
                                        fprintf(stderr, "/%.*s/\n", len, itm->pattern.str.s);
                                        break;

                                default:
                                        fprintf(stderr, "regexp(0x%02x,\"%.*s\")\n",
                                                itm->pattern.dialect, len, itm->pattern.str.s);
                                        break;
                                }
                        }
		}

                // search for end
                for (pspp = &ast->properties.set; *pspp != NULL; pspp = &(*pspp)->next) {
                        continue;
                }

                *pspp = ps;
        @};

        <set-additional-properties>:    (sch :ast-schema) -> () = @{
		if (debug & DEBUG_ACT) {
                        // XXX - make this useful!
			fprintf(stderr, "<set-additional-properties>: %p\n", (void *) @sch);
		}
                ast->additional_properties = @sch;
        @};

        <set-property-names>:       (sch :ast-schema) -> () = @{
                ast->property_names = @sch;
        @};

        <new-schema-list>: () -> (lst :ast-schema-list) = @{
                ast_schema_list_t l;
                l = xmalloc(sizeof *l);

                l->head = NULL;
                l->tail = &l->head;

                @lst = l;
        @};

        <free-schema-list>: (lst :ast-schema-list) -> () = @{
                free(@lst);
        @};

        <append-schema-to-list>: (lst :ast-schema-list, sch :ast-schema) -> () = @{
                struct ast_schema_set *sset;
                struct ast_schema *s;
                ast_schema_list_t l;

                l = @lst;
                assert(l != NULL);
                assert(l->tail != NULL);

                s = @sch;
                assert(s != NULL);

                sset = xmalloc(sizeof *sset);
                sset->schema = s;
                sset->next = NULL;
                
                *l->tail = sset;
                l->tail = &sset->next;
                l->count++;
        @};

        <set-items-single>: (sch :ast-schema) -> () = @{
                struct ast_schema_set *lst;
                struct ast_schema *s;

                s = @sch;
                assert(s != NULL);

                lst = xmalloc(sizeof *lst);
                lst->schema = s;
                lst->next = NULL;

                ast->items = lst;
                ast->kws |= KWS_SINGLETON_ITEMS;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-items-single>:\n");
                        // FIXME: print out schema
                }
        @};

        <set-additional-items>: (sch :ast-schema) -> () = @{
                struct ast_schema *s = @sch;
                assert(s != NULL);

                ast->additional_items = s;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-additional-items>:\n");
                        // FIXME: print out schema
                }
        @};

        <set-contains>: (sch :ast-schema) -> () = @{
                struct ast_schema *s = @sch;
                assert(s != NULL);

                ast->contains = s;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-contains>:\n");
                        // FIXME: print out schema
                }
        @};

        <set-items-list>: (lst :ast-schema-list) -> () = @{
                ast_schema_list_t items;

                items = @lst;
                ast->kws &= ~KWS_SINGLETON_ITEMS;
                set_schema_list(&ast->items, items, "set-items-list");
        @};

	<add-to-definitions>:	(sch :ast-schema) -> () = @{
		ast_add_definitions(ast, @sch);
	@};

        <set-definitions>:          (lst :ast-schema-list) -> () = @{
		ast_schema_list_t defs;
		defs = @lst;
		set_schema_list(&ast->definitions, defs, "set-definitions");
	@};

	<set-min-items>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MIN_ITEMS, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-min-items>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MIN_ITEMS;
		ast->min_items = c;
	@};

	<set-max-items>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MAX_ITEMS, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-max-items>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MAX_ITEMS;
		ast->max_items = c;
	@};

	<set-unique-items>: (b :bool) -> () = @{
		ast->unique_items = @b;
	@};

        <set-all-of>:   (lst :ast-schema-list) -> () = @{
                ast_schema_list_t items;

                items = @lst;
                set_schema_list(&ast->some_of.set, items, "set-all-of");
                ast->some_of.min = items->count;
                ast->some_of.max = items->count;
        @};

        <set-any-of>:   (lst :ast-schema-list) -> () = @{
                ast_schema_list_t items;

                items = @lst;
                set_schema_list(&ast->some_of.set, items, "set-any-of");
                ast->some_of.min = 1;
                ast->some_of.max = items->count;
        @};

        <set-one-of>:  (lst :ast-schema-list) -> () = @{
                ast_schema_list_t items;

                items = @lst;
                set_schema_list(&ast->some_of.set, items, "set-any-of");
                ast->some_of.min = 1;
                ast->some_of.max = 1;
		if (debug & DEBUG_ACT) {
                        // XXX - print out schemas
			fprintf(stderr, "<set-one-of>: %p\n", (void *)items);
		}
        @};

        <set-not>:  (sch :ast-schema) -> () = @{
                ast->not = @sch;
		if (debug & DEBUG_ACT) {
                        // XXX - print out schema
			fprintf(stderr, "<set-not>: %p\n", (void *)ast->not);
		}
        @};

	<set-schema>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-schema>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->schema = @s;
	@};

	<set-id>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-id>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

                /* set the id of the parent */
                {
                        struct path_element *ptop, *pparent;
                        assert(path->len > 1);
                        ptop = &path->items[0];
                        pparent = &path->items[path->len-2]; /* -1 for current, -2 for parent */
                        path_set_baseid(ptop,pparent, @s);
                }
		/* ast->id = @s; */
	@};

	<set-multiple-of>: (n :number) -> () = @{
		if (!(@n > 0)) {
			xerr(lex_state, KW_MULTIPLE_OF, "expected > 0, got %f", @n);
		}

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-multiple-of>: %f\n", @n);
		}

		ast->kws |= KWS_MULTIPLE_OF;
		ast->multiple_of = @n;
	@};

	<set-maximum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-maximum>: %f\n", @n);
		}

		ast->kws |= KWS_MAXIMUM;
		ast->maximum = @n;
		ast->exclusive_maximum = false;
	@};

	<set-exclusive-maximum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-exclusive-maximum>: %f\n", @n);
		}

		ast->kws |= KWS_MAXIMUM;
		ast->maximum = @n;
		ast->exclusive_maximum = true;
	@};

	<set-minimum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-minimum>: %f\n", @n);
		}

		ast->kws |= KWS_MINIMUM;
		ast->minimum = @n;
		ast->exclusive_minimum = false;
	@};

	<set-exclusive-minimum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-exclusive-minimum>: %f\n", @n);
		}

		ast->kws |= KWS_MINIMUM;
		ast->minimum = @n;
		ast->exclusive_minimum = true;
	@};

	<set-min-properties>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MIN_PROPERTIES, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-min-properties>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MIN_PROPERTIES;
		ast->min_properties = c;
	@};

	<set-max-properties>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MAX_PROPERTIES, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-max-properties>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MAX_PROPERTIES;
		ast->max_properties = c;
	@};

	<set-min-length>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MIN_LENGTH, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-min-length>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MIN_LENGTH;
		ast->min_length= c;
	@};

	<set-max-length>: (n :number) -> () = @{
                ast_count c;

		if (!(@n >= 0)) {
			xerr(lex_state, KW_MAX_LENGTH, "expected > 0, got %f", @n);
		}

                c = (ast_count)@n;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-max-length>: %ld\n", (long)c);
		}

		ast->kws |= KWS_MAX_LENGTH;
		ast->max_length= c;
	@};

        <set-pattern>:              (re :regexp) -> () = @{
                ast->pattern = @re;
        @};

	<clear-types> = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<clear-types>\n");
		}

		ast->types = 0;
	@};

	<set-type>: (t :type) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-type>: \"%s\"\n", type_name(@t));
		}

		switch (@t) {
		case JSON_VALUE_OBJECT:
		case JSON_VALUE_ARRAY:
		case JSON_VALUE_STRING:
		case JSON_VALUE_NUMBER:
		case JSON_VALUE_INTEGER:
		case JSON_VALUE_BOOL:
		case JSON_VALUE_NULL:
			break;

		default:
			xerr(lex_state, KW_TYPE, "Type must be one of: "
				"\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\" or \"integer\"");
		}

		if ((ast->types & @t)) {
			/* TODO: quote C&V for errors */
			xerr(lex_state, KW_TYPE, "Duplicate type; type names must be unique");
		}

		ast->types |= @t;
	@};

	<set-title>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-title>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->title = @s;
	@};

	<set-description>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-description>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->description = @s;
	@};

	<new-string-set>: () -> (ss :ast-string-set) = @{
		struct string_set *ss;
		ss = xmalloc(sizeof *ss);
		ss->head = NULL;
		ss->tail = &ss->head;
		@ss = ss;
	@};

	<append-string-set>: (ss :ast-string-set, s :string) -> () = @{
		struct string_set *ss = @ss;
		struct ast_string_set *item;

		item = xmalloc(sizeof *item);
		item->str = @s;
		item->next = NULL;
		*ss->tail = item;
		ss->tail = &item->next;
	@};

	<add-string-dependency>:    (n :string,ss :ast-string-set) -> () = @{
		struct ast_property_names *pn;
		struct string_set *ss;

		ss = @ss;

		pn = xmalloc(sizeof *pn);
		pn->pattern.dialect = RE_LITERAL;
		pn->pattern.str = @n;
		pn->set = ss->head;

		pn->next = ast->dependencies_strings.set;
		ast->dependencies_strings.set = pn;
	@};

	<add-schema-dependency>:    (n :string, sch :ast-schema) -> () = @{
		struct ast_property_schema *ps;
		struct ast_schema *sch;

		sch = @sch;

		ps = xmalloc(sizeof *ps);
		ps->pattern.dialect = RE_LITERAL;
		ps->pattern.str = @n;
		ps->schema = sch;

		ps->next = ast->dependencies_schema.set;
		ast->dependencies_schema.set = ps;
        @};

	/* XXX - overlap with enum constraint... */
        <set-const>: (v :ast-json-value) -> () = @{
		struct ast_value_set *v, **it;
		v = xmalloc(sizeof *v);
		v->value = @v;
		v->next = NULL;

		for (it = &ast->xenum; *it != NULL; it = &(*it)->next) {
			continue;
		}

		*it = v;
        @};

	/* XXX - overlap with const constraint... */
        <add-enum>: (v :ast-json-value) -> () = @{
		struct ast_value_set *v, **it;
		v = xmalloc(sizeof *v);
		v->value = @v;
		v->next = NULL;

		for (it = &ast->xenum; *it != NULL; it = &(*it)->next) {
			continue;
		}

		*it = v;
        @};

        <add-example>: (v :ast-json-value) -> () = @{
		struct ast_value_set *v, **it;
		v = xmalloc(sizeof *v);
		v->value = @v;
		v->next = NULL;

		for (it = &ast->examples; *it != NULL; it = &(*it)->next) {
			continue;
		}

		*it = v;
        @};

	<ast-json-empty-value>: () -> (v :ast-json-value) = @{;
		static const struct json_value zero_value;
		@v = zero_value;
	@};

	<ast-json-new-property-list>: () -> (l :ast-json-property-list) = @{
		struct ast_json_plist *pl;
		pl = xmalloc(sizeof *pl);
		pl->head = NULL;
		pl->tail = &pl->head;
		@l = pl;
	@};

	<ast-json-free-property-list>: (l :ast-json-property-list) -> () = @{
		struct ast_json_plist *pl;
		pl = @l;
		free(pl);
	@};

	<ast-json-free-property-list-and-properties>: (l :ast-json-property-list) -> () = @{
		struct ast_json_plist *pl;
		pl = @l;
		ast_json_free_properties(pl->head);
		free(pl);
	@};

	<ast-json-new-property-pair>: (n :string, v :ast-json-value) -> (pair :ast-json-property-pair) = @{
		struct json_property *pp;
		struct json_string pn;
		struct json_value pv;

		pn = @n;
		pv = @v;

		pp = xmalloc(sizeof *pp);
		pp->name = json_strdup(pn);
		pp->value = pv;

		@pair = pp;
	@};

	<ast-json-append-property>: (pl :ast-json-property-list, pp :ast-json-property-pair) -> () = @{
		struct json_property *pp;
		struct ast_json_plist *pl;

		pl = @pl;
		pp = @pp;

		*pl->tail = pp;
		pl->tail = &pp->next;
		*pl->tail = NULL;
	@};

	<ast-json-new-object>: (pl :ast-json-property-list) -> (v :ast-json-value) = @{
		struct json_value v;
		struct ast_json_plist *pl;

		pl = @pl;
		v.type = JSON_VALUE_OBJECT;
		v.u.obj = pl->head;
		@v = v;
	@};

	<ast-json-new-item-list>: () -> (l :ast-json-item-list) = @{
		struct ast_json_ilist *l;
		l = xmalloc(sizeof *l);
		l->head = NULL;
		l->tail = &l->head;
		@l = l;
	@};

	<ast-json-free-item-list>: (l :ast-json-item-list) -> () = @{
		struct ast_json_ilist *l;
		l = @l;
		free(l);
	@};

	<ast-json-free-item-list-and-items>: (l :ast-json-item-list) -> () = @{
		struct ast_json_ilist *l;
		l = @l;
		ast_json_free_elements(l->head);
		free(l);
	@};


	<ast-json-item-list-append>: (l :ast-json-item-list, v :ast-json-value) -> () = @{
		struct ast_json_ilist *l;
		struct json_element *elt;
		struct json_value v;

		l = @l;
		v = @v;

		elt = xmalloc(sizeof *elt);
		elt->value = v;
		elt->next = NULL;

		*l->tail = elt;
		l->tail = &elt->next;
	@};

	<ast-json-new-array>: (l :ast-json-item-list) -> (v :ast-json-value) = @{
		struct json_value v;
		struct ast_json_ilist *l;

		l = @l;

		v.type = JSON_VALUE_ARRAY;
		v.u.arr = l->head;
		@v = v;
	@};

	<ast-json-new-string>: (s :string) -> (v :ast-json-value) = @{
		struct json_string s;
		struct json_value v;

		s = @s;
		v.type = JSON_VALUE_STRING;
		v.u.str = json_strdup(s);

		@v = v;
	@};

	<ast-json-new-number>: (n :number) -> (v :ast-json-value) = @{
		struct json_value v;
		v.type = JSON_VALUE_NUMBER;
		v.u.n = @n;
		@v = v;
	@};

	<ast-json-new-bool>: (b :bool) -> (v :ast-json-value) = @{
		struct json_value v;
		v.type = JSON_VALUE_BOOL;
		v.u.v = @b;
		@v = v;
	@};

	<ast-json-new-null>: () -> (v :ast-json-value) = @{
		struct json_value v;
		v.type = JSON_VALUE_NULL;
		@v = v;
	@};

	<err-unimplemented> = @{
		xerr(lex_state, 0, "unimplemented");
	@};

	<err-syntax> = @{
		xerr_syntax(lex_state, NULL);
	@};

	<err-expected-colon> = @{
		xerr_syntax(lex_state, "colon");
	@};

	<err-expected-comma> = @{
		xerr_syntax(lex_state, "comma");
	@};

	<err-expected-directive> = @{
		xerr_syntax(lex_state, "keyword directive");
	@};

	<err-expected-schema> = @{
		xerr_syntax(lex_state, "schema");
	@};

	<err-expected-type> = @{
		xerr_syntax(lex_state, "type");
	@};

	<err-expected-number> = @{
		xerr_syntax(lex_state, "number");
	@};

	<err-expected-string> = @{
		xerr_syntax(lex_state, "string");
	@};

	<err-expected-bool>: () -> (b :bool) = @{
		@b = false;
		xerr_syntax(lex_state, "bool");
	@};

	<err-expected-id> = @{
		xerr_syntax(lex_state, "id");
	@};

%trailer% @{

	void
	parse(struct sjp_lexer *lex_state, struct ast_schema *ast, struct json_string base_uri)
	{
		struct act_state a, *act_state = &a;
		struct path p = { 0 };

		assert(lex_state != NULL);
		assert(ast != NULL);

		ADVANCE_LEXER;

		p_file(lex_state, act_state, ast, &p, base_uri);
	}

@}, @{

	void
	parse(struct sjp_lexer *lex_state, struct ast_schema *ast, struct json_string base_uri);

@};

/* vim: set tabstop=8 shiftwidth=8 noexpandtab: */
