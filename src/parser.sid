/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	string;
	bool;
	number;

	kw;
	type;

	!path; /* path is a persistent and currently does not appear explicitly */

        ast-schema;
        ast-schema-list;
        ast-prop-schema;

	ast-string-set;

        ast-json-value;
	ast-json-property-list;
	ast-json-property-pair;
	ast-json-item-list;

        regexp;
        re-dialect;

%terminals%

	!ERROR;
	EOS;

	COMMA;
	COLON;
	OCURLY;    CCURLY;
	OBRACKET;  CBRACKET;
	STRING: () -> (:string);
	NUMBER: () -> (:number);
	TRUE:   () -> (:bool);
	FALSE:  () -> (:bool);
	NULL;

%productions%

	/*** for const/enum constraints ***/

	/* error handling */
	<ast-json-empty-value>: () -> (:ast-json-value);

	/* parsing json object */
	<ast-json-new-property-list>: () -> (:ast-json-property-list);
	<ast-json-free-property-list>: (:ast-json-property-list) -> ();
	<ast-json-free-property-list-and-properties>: (:ast-json-property-list) -> ();

	<ast-json-new-property-pair>: (:string, :ast-json-value) -> (:ast-json-property-pair);
	<ast-json-append-property>: (:ast-json-property-list, :ast-json-property-pair) -> ();

	<ast-json-new-object>: (:ast-json-property-list) -> (:ast-json-value);

	/* parsing json arrays */
	<ast-json-new-item-list>: () -> (:ast-json-item-list);
	<ast-json-free-item-list>: (:ast-json-item-list) -> ();
	<ast-json-free-item-list-and-items>: (:ast-json-item-list) -> ();

	<ast-json-item-list-append>: (:ast-json-item-list, :ast-json-value) -> ();
	<ast-json-new-array>: (:ast-json-item-list) -> (:ast-json-value);

	/* parsing json simple values */
	<ast-json-new-string>: (:string) -> (:ast-json-value);
	<ast-json-new-number>: (:number) -> (:ast-json-value);
	<ast-json-new-bool>: (:bool) -> (:ast-json-value);
	<ast-json-new-null>: () -> (:ast-json-value);

	/* some helpers */
	<new-string-set>: () -> (:ast-string-set);
	<append-string-set>: (:ast-string-set, :string) -> ();

	/* id helpers */
        <path-set-baseuri>:     (:string) -> ();
	<path-push-empty>:	() -> ();
	<path-push-str>:	(:string) -> ();
	<path-push-num-zero>:	() -> ();
	<path-push-num-next>:	() -> ();
	<path-pop>:		() -> ();

	/*** schema keywords ***/

	<kw-lookup>:   (:string) -> (:kw);
	<type-lookup>: (:string) -> (:type);

	<kw-schema>:                (:kw) -> (:bool);
	<kw-ref>:                   (:kw) -> (:bool);
	<kw-id>:                    (:kw) -> (:bool);

	<kw-multiple-of>:           (:kw) -> (:bool);
	<kw-maximum>:               (:kw) -> (:bool);
	<kw-exclusive-maximum>:     (:kw) -> (:bool);
	<kw-minimum>:               (:kw) -> (:bool);
	<kw-exclusive-minimum>:     (:kw) -> (:bool);
	<kw-max-length>:            (:kw) -> (:bool);
	<kw-min-length>:            (:kw) -> (:bool);
	<kw-pattern>:               (:kw) -> (:bool);
	<kw-items>:                 (:kw) -> (:bool);
	<kw-additional-items>:      (:kw) -> (:bool);
	<kw-max-items>:             (:kw) -> (:bool);
	<kw-min-items>:             (:kw) -> (:bool);
	<kw-unique-items>:          (:kw) -> (:bool);
	<kw-contains>:              (:kw) -> (:bool);
	<kw-max-properties>:        (:kw) -> (:bool);
	<kw-min-properties>:        (:kw) -> (:bool);
	<kw-required>:              (:kw) -> (:bool);
	<kw-properties>:            (:kw) -> (:bool);
	<kw-pattern-properties>:    (:kw) -> (:bool);
	<kw-additional-properties>: (:kw) -> (:bool);
	<kw-dependencies>:          (:kw) -> (:bool);
	<kw-property-names>:        (:kw) -> (:bool);

	<kw-enum>:                  (:kw) -> (:bool);
	<kw-const>:                 (:kw) -> (:bool);
	<kw-type>:                  (:kw) -> (:bool);
	<kw-all-of>:                (:kw) -> (:bool);
	<kw-any-of>:                (:kw) -> (:bool);
	<kw-one-of>:                (:kw) -> (:bool);
	<kw-not>:                   (:kw) -> (:bool);

	<kw-title>:                 (:kw) -> (:bool);
	<kw-definitions>:           (:kw) -> (:bool);
	<kw-description>:           (:kw) -> (:bool);
	<kw-default>:               (:kw) -> (:bool);
	<kw-examples>:              (:kw) -> (:bool);

	<set-const>:		    (:ast-json-value) -> ();
	<add-enum>:		    (:ast-json-value) -> ();
	<add-example>:		    (:ast-json-value) -> ();
	<set-schema>:               (:string) -> ();
	<set-id>:                   (:string) -> ();
	<set-multiple-of>:          (:number) -> ();
	<set-maximum>:              (:number) -> ();
	<set-exclusive-maximum>:    (:number) -> ();
	<set-minimum>:              (:number) -> ();
	<set-exclusive-minimum>:    (:number) -> ();
        <set-min-properties>:       (:number) -> ();
        <set-max-properties>:       (:number) -> ();
        <set-pattern>:              (:regexp) -> ();
        <set-min-length>:           (:number) -> ();
        <set-max-length>:           (:number) -> ();
	<set-type>:                 (:type)   -> ();
	<set-title>:                (:string) -> ();
	<set-description>:          (:string) -> ();
        <set-properties>:           (:ast-prop-schema) -> ();
        <set-additional-properties>:
                                    (:ast-schema) -> ();
        <set-property-names>:       (:ast-schema) -> ();
	<set-unique-items>:	    (:bool) -> ();

	<add-string-dependency>:    (:string,:ast-string-set) -> ();
	<add-schema-dependency>:    (:string,:ast-schema) -> ();

        <set-items-list>:           (:ast-schema-list) -> ();
        <set-items-single>:         (:ast-schema) -> ();
        <set-additional-items>:     (:ast-schema) -> ();
        <set-contains>:             (:ast-schema) -> ();
        <set-min-items>:            (:number) -> ();
        <set-max-items>:            (:number) -> ();

        <set-all-of>:               (:ast-schema-list) -> ();
        <set-any-of>:               (:ast-schema-list) -> ();
        <set-one-of>:               (:ast-schema-list) -> ();
        <set-not>:                  (:ast-schema)      -> ();

	<add-to-definitions>:	    (:ast-schema) -> ();
        <set-definitions>:          (:ast-schema-list) -> ();

        <new-regexp>:               (:re-dialect, :string) -> (:regexp);
        <re-literal>:               () -> (:re-dialect);
        <re-pattern>:               () -> (:re-dialect);

	<clear-types>;

        <add-required-property>:    (:string) -> ();

        <new-prop-schema>:          (:regexp,:ast-schema) -> (:ast-prop-schema);

        <append-list-of-props>:     (:ast-prop-schema,:ast-prop-schema) -> ();

        <append-schema-to-list>:    (:ast-schema-list, :ast-schema) -> ();
        <new-schema-list>:          () -> (:ast-schema-list);

        <free-schema-list>:         (:ast-schema-list) -> ();

        <parse-schema>:             () -> (:ast-schema);
        <set-path>:             () -> ();

        <set-ref>:              (:string) -> ();

        <set-schema-true>:          () -> ();
        <set-schema-false>:         () -> ();

	<err-unimplemented>;
	<err-syntax>;
	<err-expected-colon>;
	<err-expected-comma>;
	<err-expected-directive>;
	<err-expected-schema>;
	<err-expected-type>;
	<err-expected-number>;
	<err-expected-string>;
	<err-expected-bool>:	() -> (:bool);
	<err-expected-id>;

	placeholder = {
		NULL;
		<err-unimplemented>;
	};

	colon = {
		COLON;
	##
		<err-expected-colon>;
	};

	comma = {
		COMMA;
	##
		<err-expected-comma>;
	};

        json-value: () -> (v :ast-json-value) [
		json-object: () -> (v :ast-json-value) [
			property: (pl :ast-json-property-list) -> () = {
				pname = STRING;
				COLON;
				pvalue = json-value;
				p = <ast-json-new-property-pair>(pname, pvalue);
				<ast-json-append-property>(pl, p);
			};

			property-list: (pl :ast-json-property-list) -> () = {
				property(pl);
				{
					comma;
					property-list(pl);
				||
					$;
				};
			};

			whole-object: (pl :ast-json-property-list) -> () = {
				OCURLY;
				{
					property-list(pl);
				||
					$;
				};
				CCURLY;
			};
		] = {
			pl = <ast-json-new-property-list>;
			{
				whole-object(pl);
				v = <ast-json-new-object>(pl);
				<ast-json-free-property-list>(pl);
			##
				<ast-json-free-property-list-and-properties>(pl);
				v = <ast-json-empty-value>;
				<err-syntax>;
				/* @!; */ /* XXX - propagate exception */
			};
		};

		json-array: () -> (v :ast-json-value) [
			single-item: (al :ast-json-item-list) -> () = {
				v = json-value;
				<ast-json-item-list-append>(al, v);
			};

			item-list: (al :ast-json-item-list) -> () = {
				single-item(al);
				{
					comma;
					item-list(al);
				||
					$;
				};
			};

			whole-array: (al :ast-json-item-list) -> () = {
				OBRACKET;
				{
					item-list(al);
				||
					$;
				};
				CBRACKET;
			};
		] = {
			al = <ast-json-new-item-list>;
			{
				whole-array(al);
				v = <ast-json-new-array>(al);
				<ast-json-free-item-list>(al);
			##
				<ast-json-free-item-list-and-items>(al);
				v = <ast-json-empty-value>;
				<err-syntax>;
				/* @!; */ /* XXX - propagate exception */
			};
		};

		json-string: () -> (v :ast-json-value) = {
			s = STRING;
			v = <ast-json-new-string>(s);
		};

		json-number: () -> (v :ast-json-value) = {
			n = NUMBER;
			v = <ast-json-new-number>(n);
		};

		json-bool: () -> (v :ast-json-value) = {
			{
				b = TRUE;
			||
				b = FALSE;
			};
			v = <ast-json-new-bool>(b);
		};

		json-null: () -> (v :ast-json-value) = {
			NULL;
			v = <ast-json-new-null>;
		};
        ] = {
                v = json-object;
        ||
                v = json-array;
        ||
                v = json-string;
        ||
                v = json-number;
        ||
                v = json-bool;
        ||
                v = json-null;
        };

	directive-schema = {
		s = STRING;
		<set-schema>(s);
	##
		<err-expected-string>;
	};

	directive-ref = {
                s = STRING;
                <set-ref>(s);
	##
		<err-expected-string>;
	};

	directive-id = {
		s = STRING;
		<set-id>(s);
	##
		<err-expected-id>;
	};

	directive-multiple-of = {
		n = NUMBER;
		<set-multiple-of>(n);
	##
		<err-expected-number>;
	};

	directive-maximum = {
		n = NUMBER;
		<set-maximum>(n);
	##
		<err-expected-number>;
	};

	directive-exclusive-maximum = {
		n = NUMBER;
		<set-exclusive-maximum>(n);
	##
		<err-expected-number>;
	};

	directive-minimum = {
		n = NUMBER;
		<set-minimum>(n);
	##
		<err-expected-number>;
	};

	directive-exclusive-minimum = {
		n = NUMBER;
		<set-exclusive-minimum>(n);
	##
		<err-expected-number>;
	};

	directive-min-properties = {
		n = NUMBER;
		<set-min-properties>(n);
	##
		<err-expected-number>;
	};

	directive-max-properties = {
		n = NUMBER;
		<set-max-properties>(n);
	##
		<err-expected-number>;
	};

        directive-required [
                required-property = {
                        s = STRING;
                        <add-required-property>(s);
                };

                list-of-required-properties = {
                        required-property;
                        {
                                comma;
                                list-of-required-properties;
                        ||
                                $;
                        };
                };

        ] = {
                OBRACKET;
                list-of-required-properties;
                CBRACKET;
        };

	directive-type [

		type = {
			s = STRING;
			t = <type-lookup>(s);
			<set-type>(t);
		};

		list-of-types = {
			type;
			{
				comma;
				list-of-types;
			||
				$;
			};
		};

	] = {
		/*
		 * Since multiple instances of a keyword override the previous
		 * instance, we clear the set of previous types here so as to
		 * allow uniqueness checking within one instance's array.
		 */
		<clear-types>;

		{
			type;
		||
			OBRACKET;
			list-of-types;
			CBRACKET;
		};
	##
		<err-expected-type>;
	};

        directive-definitions: () -> () [
                def-schema: () -> (sch :ast-schema) = {
                        s = STRING;
                        colon;
			<path-push-str>(s);
                        sch = <parse-schema>;
			<path-pop>;
                };

                list-of-definitions: (l :ast-schema-list) -> () = {
			s = def-schema;
			<append-schema-to-list>(l,s);
                        {
                                comma;
				list-of-definitions(l);
                        ||
                                $;
                        };
                };
        ] = {
                OCURLY;
		{
			l = <new-schema-list>;
			list-of-definitions(l);
			<set-definitions>(l);
		||
			$;
		};
                CCURLY;
        };

        directive-properties: (dialect :re-dialect) -> () [
                prop-schema: (dialect :re-dialect) -> (ps :ast-prop-schema) = {
                        s = STRING;
                        colon;
			<path-push-str>(s);
                        sch = <parse-schema>;
			<path-pop>;
                        re = <new-regexp>(dialect,s);
                        ps = <new-prop-schema>(re,sch);
                };

                list-of-properties: (dialect :re-dialect) -> (ps :ast-prop-schema) = {
                        ps = prop-schema(dialect);
                        {
                                comma;
                                ps1 = list-of-properties(dialect);
                                <append-list-of-props>(ps,ps1);
                        ||
                                $;
                        };
                };
        ] = {
                OCURLY;
                ps = list-of-properties(dialect);
                <set-properties>(ps);
                CCURLY;
        };

        directive-additional-properties = {
                sch = <parse-schema>;
                <set-additional-properties>(sch);
        };

        directive-property-names = {
                sch = <parse-schema>;
                <set-property-names>(sch);
        };

	directive-dependencies [
		single-dependency [
			string-deps: () -> (ss :ast-string-set) [
				list-of-strings: (ss :ast-string-set) -> () = {
					s = STRING;
					<append-string-set>(ss, s);
					{
						comma;
						list-of-strings(ss);
					||
						$;
					};
				};
			] = {
				ss = <new-string-set>;
				OBRACKET;
				{
					list-of-strings(ss);
				||
					$;
				};
				CBRACKET;
			};
		] = {
			n = STRING;
			colon;
			{
				ss = string-deps;
				<add-string-dependency>(n,ss);
			||
				<path-push-str>(n);
				sch = <parse-schema>;
				<path-pop>;
				<add-schema-dependency>(n,sch);
			};
		};
		
		dependency-list = {
			single-dependency;
			{
				comma;
				dependency-list;
			||
				$;
			};
		};
	] = {
		OCURLY;
		{
			dependency-list;
		||
			$;
		};
		CCURLY;
	};

        directive-pattern = {
                s = STRING;
                dialect = <re-pattern>;
                re = <new-regexp>(dialect, s);
                <set-pattern>(re);
        };

	directive-min-length = {
		n = NUMBER;
		<set-min-length>(n);
	##
		<err-expected-number>;
	};

	directive-max-length = {
		n = NUMBER;
		<set-max-length>(n);
	##
		<err-expected-number>;
	};

        schema-list: () -> (lst :ast-schema-list) [
                next-schema: (lst :ast-schema-list) -> () = {
                        sch = <parse-schema>;
                        <append-schema-to-list>(lst,sch);
                };

                list-of-schema: (lst :ast-schema-list) -> () = {
                        next-schema(lst);
                        {
                                comma;
				<path-push-num-next>;
                                list-of-schema(lst);
                        ||
                                $;
                        };
                };
        ] = {
                lst = <new-schema-list>;
		<path-push-num-zero>;
                OBRACKET;
                list-of-schema(lst);
                CBRACKET;
		<path-pop>;
        };

        directive-items = {
                lst = schema-list;
                <set-items-list>(lst);
                <free-schema-list>(lst);
        ||
                sch = <parse-schema>;
                <set-items-single>(sch);
        };

        directive-additional-items = {
                sch = <parse-schema>;
                <set-additional-items>(sch);
        };

        directive-contains = {
                sch = <parse-schema>;
                <set-contains>(sch);
        };

	directive-min-items = {
		n = NUMBER;
		<set-min-items>(n);
	##
		<err-expected-number>;
	};

	directive-max-items = {
		n = NUMBER;
		<set-max-items>(n);
	##
		<err-expected-number>;
	};

        directive-all-of = {
                lst = schema-list;
                <set-all-of>(lst);
                <free-schema-list>(lst);
        };

        directive-any-of = {
                lst = schema-list;
                <set-any-of>(lst);
                <free-schema-list>(lst);
        };

        directive-one-of = {
                lst = schema-list;
                <set-one-of>(lst);
                <free-schema-list>(lst);
        };

        directive-not = {
                sch = <parse-schema>;
                <set-not>(sch);
        };

	directive-title = {
		s = STRING;
		<set-title>(s);
	##
		<err-expected-string>;
	};

	directive-description = {
		s = STRING;
		<set-description>(s);
	##
		<err-expected-string>;
	};

	directive-const = {
		v = json-value;
		<set-const>(v);
	};

	directive-examples [
		single-value = {
			v = json-value;
			<add-example>(v);
		};

		list-of-values = {
			single-value;
			{
				comma;
				list-of-values;
			||
				$;
			};
		};
	] = {
		OBRACKET;
		list-of-values;
		CBRACKET;
	};

	directive-enum [
		single-value = {
			v = json-value;
			<add-enum>(v);
		};

		list-of-values = {
			single-value;
			{
				comma;
				list-of-values;
			||
				$;
			};
		};
	] = {
		OBRACKET;
		list-of-values;
		CBRACKET;
	};

	directive-unique-items [
		true-or-false: () -> (b :bool) = {
		{
			b = TRUE;
			||
			b = FALSE;
		};
		##
			b = <err-expected-bool>;
		};
	] = {
		b = true-or-false;
		<set-unique-items>(b);
	};

	directive: (k: kw) -> () = {
		? = <kw-schema>(k);
		directive-schema;
	||
		? = <kw-ref>(k);
		directive-ref;
	||
		? = <kw-id>(k);
		directive-id;
	||
		? = <kw-multiple-of>(k);
		directive-multiple-of;
	||
		? = <kw-maximum>(k);
		directive-maximum;
	||
		? = <kw-exclusive-maximum>(k);
		directive-exclusive-maximum;
	||
		? = <kw-minimum>(k);
		directive-minimum;
	||
		? = <kw-exclusive-minimum>(k);
		directive-exclusive-minimum;
	||
		? = <kw-max-length>(k);
                directive-max-length;
	||
		? = <kw-min-length>(k);
                directive-min-length;
	||
		? = <kw-pattern>(k);
		directive-pattern;
	||
		? = <kw-items>(k);
                directive-items;
	||
		? = <kw-additional-items>(k);
                directive-additional-items;
	||
		? = <kw-max-items>(k);
		directive-max-items;
	||
		? = <kw-min-items>(k);
		directive-min-items;
	||
		? = <kw-unique-items>(k);
		directive-unique-items;
	||
		? = <kw-contains>(k);
                directive-contains;
	||
		? = <kw-max-properties>(k);
		directive-max-properties;
	||
		? = <kw-min-properties>(k);
		directive-min-properties;
	||
		? = <kw-required>(k);
                directive-required;
	||
		? = <kw-properties>(k);
                dialect = <re-literal>;
                directive-properties(dialect);
	||
		? = <kw-pattern-properties>(k);
                dialect = <re-pattern>;
		directive-properties(dialect);
	||
		? = <kw-additional-properties>(k);
                directive-additional-properties;
	||
		? = <kw-dependencies>(k);
		directive-dependencies;
	||
		? = <kw-property-names>(k);
		directive-property-names;
	||
		? = <kw-enum>(k);
		directive-enum;
	||
		? = <kw-const>(k);
		directive-const;
	||
		? = <kw-type>(k);
		directive-type;
	||
		? = <kw-all-of>(k);
                directive-all-of;
	||
		? = <kw-any-of>(k);
		directive-any-of;
	||
		? = <kw-one-of>(k);
                directive-one-of;
	||
		? = <kw-not>(k);
		directive-not;
	||
		? = <kw-title>(k);
		directive-title;
	||
		? = <kw-definitions>(k);
		directive-definitions;
	||
		? = <kw-description>(k);
		directive-description;
	||
		? = <kw-default>(k);
		placeholder;
	||
		? = <kw-examples>(k);
                directive-examples;
	||
		{
			/* non-directives function like 'definitions' */
			sch = <parse-schema>;
			<add-to-definitions>(sch);
		};
	##
		<err-expected-directive>;
	};

	list-of-directives = {
		s = STRING;
		k = <kw-lookup>(s);
		<path-push-str>(s);
		colon;
		directive(k);
		<path-pop>;
		{
			comma;
			list-of-directives;
		||
			$;
		};
	##
		<err-expected-directive>;
	};

	array = {
		OBRACKET;
		/* TODO: ... */
		CBRACKET;
	};

	schema = {
		OCURLY;
		{
			list-of-directives;
		||
			$;
		};
		CCURLY;
	||
		array;
	||
		! = STRING;
	||
		! = NUMBER;
	||
		! = TRUE;
                <set-schema-true>;
	||
		! = FALSE;
                <set-schema-false>;
	||
		NULL;
	##
		<err-expected-schema>;
	};

	file: (baseuri :string) -> () = {
		<path-push-empty>;
                <path-set-baseuri>(baseuri);
		schema;
                <set-path>;
		EOS;
		<path-pop>;
	##
		<err-syntax>;
	};

%entry%

	file, schema;

/* vim: set tabstop=8 shiftwidth=8 noexpandtab: */
